@model StreetFighterCadastro.Models.ListaDePersonagens
@{
    ViewBag.Title = "Ficha Técnica";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<div class="corpo subtitulo">
    <h2>Cadastro</h2>
</div>
    <div class="corpotexto cadastro">

        @using (Html.BeginForm("Salvar", "StreetFighter", FormMethod.Post, new { @class = "form-horizontal" }))
        {
            @Html.AntiForgeryToken()
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="form-group">
                @Html.LabelFor(model => model.Imagem, new { @class = "col-sm-2 control-label" })
                <div class="col-sm-10">
                    @Html.TextBoxFor(model => model.Imagem, new { @class = "form-control" })
                </div>
            </div>

            @Html.HiddenFor(model => model.Id)

            <div class="form-group">
                @Html.LabelFor(model => model.Nome, new { @class = "col-sm-2 control-label" })
                <div class="col-sm-10">
                    @Html.TextBoxFor(model => model.Nome, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Nome)
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.DataNascimento, new { @class = "col-sm-2 control-label" })
                <div class="col-sm-10">
                    @Html.TextBoxFor(model => model.DataNascimento, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.DataNascimento)
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Altura, new { @class = "col-sm-2 control-label" })
                <div class="col-sm-10">
                    @Html.TextBoxFor(model => model.Altura, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Altura)
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Peso, new { @class = "col-sm-2 control-label" })
                <div class="col-sm-10">
                    @Html.TextBoxFor(model => model.Peso, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Peso)
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Origem, new { @class = "col-sm-2 control-label" })
                <div class="col-sm-10">
                    @Html.DropDownListFor(model => model.Origem, (IEnumerable<SelectListItem>)ViewBag.ListaOrigem, "Selecione...", new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Origem)
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.GolpesEspeciais, new { @class = "col-sm-2 control-label" })
                <div class="col-sm-10">
                    @Html.TextBoxFor(model => model.GolpesEspeciais, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.GolpesEspeciais)
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.PersonagemOculto, new { @class = "col-sm-2 control-label" })
                <div class="col-sm-10">
                    @Html.CheckBoxFor(model => model.PersonagemOculto)
                    @Html.ValidationMessageFor(model => model.PersonagemOculto)
                </div>
            </div>

            <div class="form-group">
                <div class="col-sm-offset-2 col-sm-10">
                    <button type="submit" class="btn btn-default">Salvar</button>
                </div>
            </div>
        }

        <script src="~/Scripts/jquery-1.9.1.js"></script>
        <script src="~/Scripts/jquery.validate.js"></script>
        <script src="~/Scripts/jquery.validate.unobtrusive.js"></script>

        <script type="text/javascript">
            $.validator.methods.number = function (value, element) {
                var regex = /^(\d*)(\,\d{1,2})?$/; //99999,99
                return this.optional(element) || regex.test(value);
            }

            $.validator.methods.date = function (value, element) {
                var date = new Date(value.replace(/(\d{2})[/](\d{2})[/](\d{4})/, "$2/$1/$3")); //31/12/2016
                return this.optional(element) || !/Invalid|NaN/.test(date.toString());
            }
        </script>
    </div>
